// Enable the update/upgrade script (0=disable)
APT::Periodic::Enable "{{ apt_unattended_enable | int }}";

// Backup after n-days if archive contents changed. (0=disable)
APT::Periodic::BackupArchiveInterval "{{ apt_unattended_backup_archive_interval }}";

// Backup level. (0=disable), 1 is invalid.
APT::Periodic::BackupLevel "{{ apt_unattended_backup_level }}";

// Set maximum allowed age of a cache package file. If a cache package file is
// older it is deleted (0=disable)
APT::Periodic::MaxAge "{{ apt_unattended_max_age }}";

// Set minimum age of a package file. If a file is younger it will not be
// deleted (0=disable). Useful to prevent races and to keep backups of the
// packages for emergency.
APT::Periodic::MinAge "{{ apt_unattended_min_age }}";

// Set maximum size of the cache in MB (0=disable). If the cache is bigger,
// cached package files are deleted until the size requirement is met (the
// oldest packages will be deleted first).
APT::Periodic::MaxSize "{{ apt_unattended_max_size }}";

// Do "apt-get update" automatically every n-days (0=disable)
APT::Periodic::Update-Package-Lists "{{ apt_unattended_update_package_list }}";

// Do "apt-get upgrade --download-only" every n-days (0=disable)
APT::Periodic::Download-Upgradeable-Packages "{{ apt_unattended_download_upgradeable_packages }}";

// Run the "unattended-upgrade" security upgrade script every n-days
// (0=disabled). Requires the package "unattended-upgrades" and will write a
// log in /var/log/unattended-upgrades
APT::Periodic::Unattended-Upgrade "{{ apt_unattended_upgrades }}";

// Do "apt-get autoclean" every n-days (0=disable)
APT::Periodic::AutocleanInterval "{{ apt_unattended_autoclean_interval }}";

// Do "apt-get clean" every n-days (0=disable)
APT::Periodic::CleanInterval "{{ apt_unattended_clean_interval }}";

// Send report mail to root
//  0:  no report             (or null string)
//  1:  progress report       (actually any string)
//  2:  + command outputs     (remove -qq, remove 2>/dev/null, add -d)
//  3:  + trace on
APT::Periodic::Verbose "{{ apt_unattended_periodic_verbose }}";

// Wait for n-seconds before starting (0=disable)
APT::Periodic::RandomSleep "{{ apt_unattended_random_sleep }}";
